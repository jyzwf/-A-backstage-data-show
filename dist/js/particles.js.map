{"version":3,"sources":["webpack:///js/particles.js","webpack:///webpack/bootstrap 0eb4aa0263c5b5d86a33?28e9**","webpack:///./src/js/particles.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","win","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","dot_line","config","particles","setCanvas","this","canvas","width","W","height","H","cxt","getContext","paintCanvas","fillStyle","cvBgColor","fillRect","particleClass","x","Math","random","y","vx","dotVx","vy","dotVy","radius","dotRadius","draw","dotColor","beginPath","arc","PI","fill","addParticle","particlesCount","dotCount","i","Particle","push","len","length","update","j","distance","p1","p2","dx","dy","dist","sqrt","ax","dotAx","ay","dotAy","rgb","lineColor","match","rgb_r","rgb_g","rgb_b","minDist","strokeStyle","moveTo","lineTo","stroke","closePath","beginLoop","init","dl_config","window"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,QAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,cE9CA,SAAUQ,GAEVA,EAAIC,iBAAoB,WACvB,MAAOD,GAAIE,uBACPF,EAAIG,6BACJH,EAAII,0BACJJ,EAAIK,wBACJL,EAAIM,yBACJ,SAAUC,GACRP,EAAIQ,WAAYD,EAAU,IAAO,OAIxC,IAAIE,IAEHC,UAGAC,aAGAC,UAAY,WACX,GAAIF,GAASG,KAAKH,MAIlB,OAHAA,GAAOI,OAAOC,MAAQL,EAAOM,EAC7BN,EAAOI,OAAOG,OAASP,EAAOQ,EAC9BL,KAAKM,IAAMT,EAAOI,OAAOM,WAAW,MAC7BP,MAIRQ,YAAY,WACX,GAAIX,GAASG,KAAKH,MAClBG,MAAKM,IAAIG,UAAYZ,EAAOa,UAC5BV,KAAKM,IAAIK,SAAS,EAAE,EAAEd,EAAOM,EAAEN,EAAOQ,IAKvCO,cAAgB,WACf,GAAIN,GAAMN,KAAKM,IACdT,EAASG,KAAKH,MAEf,OAAO,YAGNG,KAAKa,EAAIC,KAAKC,SAAWlB,EAAOM,EAChCH,KAAKgB,EAAIF,KAAKC,SAAWlB,EAAOQ,EAGhCL,KAAKiB,GAAKH,KAAKC,SAAWlB,EAAOqB,MACjClB,KAAKmB,GAAKL,KAAKC,SAAWlB,EAAOuB,MAGjCpB,KAAKqB,OAASxB,EAAOyB,UAGrBtB,KAAKuB,KAAO,WACXjB,EAAIG,UAAYZ,EAAO2B,SACvBlB,EAAImB,YACFnB,EAAIoB,IAAI1B,KAAKa,EAAEb,KAAKgB,EAAEhB,KAAKqB,OAAO,EAAY,EAAVP,KAAKa,IAAO,GAChDrB,EAAIsB,UAMTC,YAAY,WAKX,IAJA,GAAIC,GAAiB9B,KAAKH,OAAOkC,SAChCC,EAAE,EACFC,EAAWjC,KAAKY,gBAEZoB,EAAEF,EAAeE,IACrBhC,KAAKF,UAAUoC,KAAK,GAAID,GAIzB,OAAOjC,OAIRuB,KAAK,WAEJvB,KAAKQ,aAML,KAFA,GAAIwB,GAAI,EAAEG,EAAMnC,KAAKF,UAAUsC,OAE1BJ,EAAEG,EAAIH,IACThC,KAAKF,UAAUkC,GAAGT,MAIpBvB,MAAKqC,UAKNA,OAAO,WAIN,IAHA,GAASC,GAA8BpD,EAAnC8C,EAAG,EAAIG,EAAMnC,KAAKF,UAAUsC,OAC5BvC,EAASG,KAAKH,OAEbmC,EAAEG,EAAIH,IA0BV,IAzBA9C,EAAIc,KAAKF,UAAUkC,GAGnB9C,EAAE2B,GAAK3B,EAAE+B,GACT/B,EAAE8B,GAAK9B,EAAEiC,GAKNjC,EAAE2B,EAAI3B,EAAEmC,OAASxB,EAAOM,EAC1BjB,EAAE2B,EAAI3B,EAAEmC,OACAnC,EAAE2B,EAAI3B,EAAEmC,OAAS,IACzBnC,EAAE2B,EAAIhB,EAAOM,EAAIjB,EAAEmC,QAIjBnC,EAAE8B,EAAI9B,EAAEmC,OAASxB,EAAOQ,EAC1BnB,EAAE8B,EAAI9B,EAAEmC,OACAnC,EAAE8B,EAAI9B,EAAEmC,OAAS,IACzBnC,EAAE8B,EAAInB,EAAOQ,EAAInB,EAAEmC,QAMhBiB,EAAIN,EAAE,EAAEM,EAAEH,EAAIG,IACjBtC,KAAKuC,SAASrD,EAAEc,KAAKF,UAAUwC,KAMlCC,SAAS,SAASC,EAAGC,GACpB,GAAIC,GAAKF,EAAG3B,EAAI4B,EAAG5B,EAClB8B,EAAKH,EAAGxB,EAAIyB,EAAGzB,EACf4B,EAAO9B,KAAK+B,KAAMH,EAAGA,EAAKC,EAAGA,GAC7B9C,EAASG,KAAKH,OACdS,EAAMN,KAAKM,IACXwC,EAAKJ,EAAK7C,EAAOkD,MACjBC,EAAKL,EAAK9C,EAAOoD,MAEjBC,EAAMrD,EAAOsD,UAAUC,MAAM,QAC7BC,GAASH,EAAI,GACbI,GAASJ,EAAI,GACbK,GAASL,EAAI,EAIXN,IAAQ/C,EAAO2D,UACjBlD,EAAImB,YACJnB,EAAImD,YAAc,QAAQJ,EAAM,IAAIC,EAAM,IAAIC,EAAM,KAAK,IAAKX,EAAK/C,EAAO2D,SAAU,IACpFlD,EAAIoD,OAAOlB,EAAG3B,EAAE2B,EAAGxB,GACnBV,EAAIqD,OAAOlB,EAAG5B,EAAE4B,EAAGzB,GACnBV,EAAIsD,SACJtD,EAAIuD,YAGJrB,EAAGvB,IAAM6B,EACTN,EAAGrB,IAAM6B,EAETP,EAAGxB,IAAM6B,EACTL,EAAGtB,IAAM6B,IAMXc,UAAU,WACTlE,EAAS2B,OACTnC,iBAAiBQ,EAASkE,YAI3BC,KAnKc,SAmKTlE,GACJG,KAAKH,OAASA,EACdG,KAAKD,YAAY8B,cAAciC,aAKjC3E,GAAI6E,UAAY,SAASnE,GACxBD,EAASmE,KAAKlE,KAEboE","file":"./js/particles.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t;(function (win) {\n\t\t// 获取更光滑的动画\n\t\twin.requestAnimFrame = function () {\n\t\t\treturn win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n\t\t\t\twin.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t\t}();\n\t\n\t\tvar dot_line = {\n\t\t\t// 粒子的配置\n\t\t\tconfig: {},\n\t\n\t\t\t// 包含各个粒子的数组\n\t\t\tparticles: [],\n\t\n\t\t\t// 初始化canvas\n\t\t\tsetCanvas: function setCanvas() {\n\t\t\t\tvar config = this.config;\n\t\t\t\tconfig.canvas.width = config.W;\n\t\t\t\tconfig.canvas.height = config.H;\n\t\t\t\tthis.cxt = config.canvas.getContext('2d');\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\t// 画canvas的背景\n\t\t\tpaintCanvas: function paintCanvas() {\n\t\t\t\tvar config = this.config;\n\t\t\t\tthis.cxt.fillStyle = config.cvBgColor;\n\t\t\t\tthis.cxt.fillRect(0, 0, config.W, config.H);\n\t\t\t},\n\t\n\t\t\t// 粒子类\n\t\t\tparticleClass: function particleClass() {\n\t\t\t\tvar cxt = this.cxt,\n\t\t\t\t    config = this.config;\n\t\n\t\t\t\treturn function Particle() {\n\t\n\t\t\t\t\t// 粒子的初始位置\n\t\t\t\t\tthis.x = Math.random() * config.W;\n\t\t\t\t\tthis.y = Math.random() * config.H;\n\t\n\t\t\t\t\t// 粒子的速度\n\t\t\t\t\tthis.vx = Math.random() * config.dotVx;\n\t\t\t\t\tthis.vy = Math.random() * config.dotVy;\n\t\n\t\t\t\t\t// 粒子的大小\n\t\t\t\t\tthis.radius = config.dotRadius;\n\t\n\t\t\t\t\t// 画粒子\n\t\t\t\t\tthis.draw = function () {\n\t\t\t\t\t\tcxt.fillStyle = config.dotColor;\n\t\t\t\t\t\tcxt.beginPath();\n\t\t\t\t\t\tcxt.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n\t\t\t\t\t\tcxt.fill();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\t//\t往粒子数组中加入粒子\n\t\t\taddParticle: function addParticle() {\n\t\t\t\tvar particlesCount = this.config.dotCount,\n\t\t\t\t    i = 0,\n\t\t\t\t    Particle = this.particleClass();\n\t\n\t\t\t\tfor (; i < particlesCount; i++) {\n\t\t\t\t\tthis.particles.push(new Particle());\n\t\t\t\t}\n\t\n\t\t\t\t// console.log(this.particles)\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\t// 在canvas里添加动画\n\t\t\tdraw: function draw() {\n\t\n\t\t\t\tthis.paintCanvas();\n\t\n\t\t\t\t// 各个粒子开始画\n\t\n\t\t\t\tvar i = 0,\n\t\t\t\t    len = this.particles.length;\n\t\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tthis.particles[i].draw();\n\t\t\t\t}\n\t\n\t\t\t\t// 更新各个粒子的状态\n\t\t\t\tthis.update();\n\t\t\t},\n\t\n\t\t\t// 让粒子动起来\n\t\t\tupdate: function update() {\n\t\t\t\tvar i = 0,\n\t\t\t\t    j,\n\t\t\t\t    len = this.particles.length,\n\t\t\t\t    p,\n\t\t\t\t    p2;\n\t\t\t\tvar config = this.config;\n\t\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tp = this.particles[i];\n\t\n\t\t\t\t\t// 改变例子速度\n\t\t\t\t\tp.x += p.vx;\n\t\t\t\t\tp.y += p.vy;\n\t\n\t\t\t\t\t// 判断例子距离画布周边的距离以及碰到后的动作\n\t\n\t\t\t\t\t// 水平方向上的限制\n\t\t\t\t\tif (p.x + p.radius > config.W) {\n\t\t\t\t\t\tp.x = p.radius;\n\t\t\t\t\t} else if (p.x - p.radius < 0) {\n\t\t\t\t\t\tp.x = config.W - p.radius;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// 竖直方向上的限制\n\t\t\t\t\tif (p.y + p.radius > config.H) {\n\t\t\t\t\t\tp.y = p.radius;\n\t\t\t\t\t} else if (p.y - p.radius < 0) {\n\t\t\t\t\t\tp.y = config.H - p.radius;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// 当粒子之间的距离大于规定距离时，画线\n\t\n\t\t\t\t\tfor (j = i + 1; j < len; j++) {\n\t\t\t\t\t\tthis.distance(p, this.particles[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t// 画线操作\n\t\t\tdistance: function distance(p1, p2) {\n\t\t\t\tvar dx = p1.x - p2.x,\n\t\t\t\t    dy = p1.y - p2.y,\n\t\t\t\t    dist = Math.sqrt(dx * dx + dy * dy),\n\t\t\t\t    config = this.config,\n\t\t\t\t    cxt = this.cxt,\n\t\t\t\t    ax = dx / config.dotAx,\n\t\t\t\t    ay = dy / config.dotAy,\n\t\n\t\t\t\t// 获取线的颜色\n\t\t\t\trgb = config.lineColor.match(/\\d+/g),\n\t\t\t\t    rgb_r = +rgb[0],\n\t\t\t\t    rgb_g = +rgb[1],\n\t\t\t\t    rgb_b = +rgb[2];\n\t\n\t\t\t\t// 判断距离，，如果到达，就连接两点\n\t\t\t\tif (dist <= config.minDist) {\n\t\t\t\t\tcxt.beginPath();\n\t\t\t\t\tcxt.strokeStyle = 'rgba(' + rgb_r + ',' + rgb_g + ',' + rgb_b + ',' + (1.3 - dist / config.minDist) + \")\";\n\t\t\t\t\tcxt.moveTo(p1.x, p1.y);\n\t\t\t\t\tcxt.lineTo(p2.x, p2.y);\n\t\t\t\t\tcxt.stroke();\n\t\t\t\t\tcxt.closePath();\n\t\n\t\t\t\t\t// 根据粒子的距离来决定加速度\n\t\t\t\t\tp1.vx -= ax;\n\t\t\t\t\tp1.vy -= ay;\n\t\n\t\t\t\t\tp2.vx += ax;\n\t\t\t\t\tp2.vy += ay;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t// 循环动画\n\t\t\tbeginLoop: function beginLoop() {\n\t\t\t\tdot_line.draw();\n\t\t\t\trequestAnimFrame(dot_line.beginLoop);\n\t\t\t},\n\t\n\t\t\t// 初始化\n\t\t\tinit: function init(config) {\n\t\t\t\tthis.config = config;\n\t\t\t\tthis.setCanvas().addParticle().beginLoop();\n\t\t\t}\n\t\t};\n\t\n\t\t// 暴露接口\n\t\twin.dl_config = function (config) {\n\t\t\tdot_line.init(config);\n\t\t};\n\t})(window);\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** js/particles.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0eb4aa0263c5b5d86a33\n **/",";(function(win){\r\n\t// 获取更光滑的动画\r\n\twin.requestAnimFrame = (function(){\r\n\t\treturn win.requestAnimationFrame\t\t||\r\n\t\t\t   win.webkitRequestAnimationFrame\t||\r\n\t\t\t   win.mozRequestAnimationFrame\t\t||\r\n\t\t\t   win.oRequestAnimationFrame\t\t||\r\n\t\t\t   win.msRequestAnimationFrame\t\t||\r\n\t\t\t   function( callback ){\r\n\t\t\t   \t\twin.setTimeout( callback, 1000 / 60);\r\n\t\t\t   };\r\n\t})();\r\n\r\n\tvar dot_line = {\r\n\t\t// 粒子的配置\r\n\t\tconfig:{},\r\n\r\n\t\t// 包含各个粒子的数组\r\n\t\tparticles:[],\r\n\r\n\t\t// 初始化canvas\r\n\t\tsetCanvas : function(){\r\n\t\t\tvar config = this.config;\r\n\t\t\tconfig.canvas.width = config.W;\r\n\t\t\tconfig.canvas.height = config.H;\r\n\t\t\tthis.cxt = config.canvas.getContext('2d');\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t// 画canvas的背景\r\n\t\tpaintCanvas:function(){\r\n\t\t\tvar config = this.config; \r\n\t\t\tthis.cxt.fillStyle = config.cvBgColor;\r\n\t\t\tthis.cxt.fillRect(0,0,config.W,config.H);\r\n\t\t},\r\n\r\n\r\n\t\t// 粒子类\r\n\t\tparticleClass : function(){\r\n\t\t\tvar cxt = this.cxt,\r\n\t\t\t\tconfig = this.config;\r\n\r\n\t\t\treturn function Particle(){\r\n\r\n\t\t\t\t// 粒子的初始位置\r\n\t\t\t\tthis.x = Math.random() * config.W;\r\n\t\t\t\tthis.y = Math.random() * config.H;\r\n\r\n\t\t\t\t// 粒子的速度\r\n\t\t\t\tthis.vx = Math.random() * config.dotVx;\r\n\t\t\t\tthis.vy = Math.random() * config.dotVy;\r\n\r\n\t\t\t\t// 粒子的大小\r\n\t\t\t\tthis.radius = config.dotRadius;\r\n\r\n\t\t\t\t// 画粒子\r\n\t\t\t\tthis.draw = function(){\r\n\t\t\t\t\tcxt.fillStyle = config.dotColor;\r\n\t\t\t\t\tcxt.beginPath();\r\n\t\t  \t\t\tcxt.arc(this.x,this.y,this.radius,0,Math.PI * 2,false);\r\n\t\t  \t\t\tcxt.fill();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t//\t往粒子数组中加入粒子\r\n\t\taddParticle:function(){\r\n\t\t\tvar particlesCount = this.config.dotCount,\r\n\t\t\t\ti=0,\r\n\t\t\t\tParticle = this.particleClass();\r\n\r\n\t\t\tfor(;i<particlesCount;i++){\r\n\t\t\t\tthis.particles.push(new Particle());\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(this.particles)\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t// 在canvas里添加动画\r\n\t\tdraw:function(){\r\n\r\n\t\t\tthis.paintCanvas();\r\n\r\n\t\t\t// 各个粒子开始画\r\n\t\t\t\r\n\t\t\tvar i = 0,len = this.particles.length;\r\n\r\n\t\t\tfor(;i<len;i++){\r\n\t\t\t\t this.particles[i].draw();\r\n\t\t\t}\r\n\r\n\t\t\t// 更新各个粒子的状态\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\r\n\t\t// 让粒子动起来\r\n\t\tupdate:function(){\r\n\t\t\tvar i =0,j,len = this.particles.length,p,p2;\r\n\t\t\tvar config = this.config;\r\n\r\n\t\t\tfor(;i<len;i++){\r\n\t\t\t\tp = this.particles[i];\r\n\r\n\t\t\t\t// 改变例子速度\r\n\t\t\t\tp.x += p.vx;\r\n\t\t\t\tp.y += p.vy;\r\n\r\n\t\t\t\t// 判断例子距离画布周边的距离以及碰到后的动作\r\n\t\t\t\t\r\n\t\t\t\t// 水平方向上的限制\r\n\t\t\t\tif(p.x + p.radius > config.W){\r\n\t\t\t\t\tp.x = p.radius;\r\n\t\t\t\t}else if(p.x - p.radius < 0){\r\n\t\t\t\t\tp.x = config.W - p.radius;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 竖直方向上的限制\r\n\t\t\t\tif(p.y + p.radius > config.H){\r\n\t\t\t\t\tp.y = p.radius;\r\n\t\t\t\t}else if(p.y - p.radius < 0){\r\n\t\t\t\t\tp.y = config.H - p.radius;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// 当粒子之间的距离大于规定距离时，画线\r\n\t\t\t\t\r\n\t\t\t\tfor(j = i+1;j<len;j++){\r\n\t\t\t\t\tthis.distance(p,this.particles[j])\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// 画线操作\r\n\t\tdistance:function(p1,p2){\r\n\t\t\tvar dx = p1.x - p2.x,\r\n\t\t\t\tdy = p1.y - p2.y,\r\n\t\t\t\tdist = Math.sqrt( dx*dx + dy*dy ),\r\n\t\t\t\tconfig = this.config,\r\n\t\t\t\tcxt = this.cxt,\r\n\t\t\t\tax = dx / config.dotAx,\r\n\t\t\t\tay = dy / config.dotAy,\r\n\t\t\t\t// 获取线的颜色\r\n\t\t\t\trgb = config.lineColor.match(/\\d+/g),\r\n\t\t\t\trgb_r = +rgb[0],\r\n\t\t\t\trgb_g = +rgb[1],\r\n\t\t\t\trgb_b = +rgb[2];\r\n\r\n\r\n\t\t\t// 判断距离，，如果到达，就连接两点\r\n\t\t\tif(dist <= config.minDist){\r\n\t\t\t\tcxt.beginPath();\r\n\t\t\t\tcxt.strokeStyle = 'rgba('+rgb_r+','+rgb_g+','+rgb_b+','+(1.3- dist/config.minDist) +\")\";\r\n\t\t\t\tcxt.moveTo(p1.x,p1.y);\r\n\t\t\t\tcxt.lineTo(p2.x,p2.y);\r\n\t\t\t\tcxt.stroke();\r\n\t\t\t\tcxt.closePath();\r\n\r\n\t\t\t\t// 根据粒子的距离来决定加速度\r\n\t\t\t\tp1.vx -= ax;\r\n\t\t\t\tp1.vy -= ay;\r\n\r\n\t\t\t\tp2.vx += ax;\r\n\t\t\t\tp2.vy += ay;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t// 循环动画\r\n\t\tbeginLoop:function(){\r\n\t\t\tdot_line.draw();\r\n\t\t\trequestAnimFrame(dot_line.beginLoop);\r\n\t\t},\r\n\r\n\t\t// 初始化\r\n\t\tinit(config){\r\n\t\t\tthis.config = config;\r\n\t\t\tthis.setCanvas().addParticle().beginLoop();\r\n\t\t}\r\n\t};\r\n\r\n\t// 暴露接口\r\n\twin.dl_config = function(config){\r\n\t\tdot_line.init(config);\r\n\t}\r\n})(window);\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/particles.js\n **/"],"sourceRoot":""}